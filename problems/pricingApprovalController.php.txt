<?php

namespace App\Http\Controllers\V2\Rfq\SturdFlex;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Traits\AccessControl;
use App\Traits\RfqTrait;
use App\Traits\FileSaver;
use Exception;
use GlobalApiResponse;
use Products;
use SturdflexPriceRequestMasters;
use SturdflexPriceRequestVariantMasters;
use SturdflexProjects;
use SturdflexProductMasters;
use SturdflexProductVariants;
use SturdflexPricingRequestImageMasters;
use DB;
use StatusMaster;
use Auth;
use SturdflexRetailers;
use Dealers;

class PricingRequestController extends Controller {
    use AccessControl, FileSaver, RfqTrait;

    protected $HTTP_ERROR_MESSAGE;
    protected $HTTP_SUCCESS_MESSAGE;
    protected $HTTP_NO_CONTENT_MESSAGE;
    protected $HTTP_BAD_REQUEST;
    protected $PAYMENT_TERMS_STATUS;
    protected $SUPPLY_METHOD_STATUS;
    protected $COMPETITORS;
    protected $SF_PRICING_REQUEST_FILE_PATH;
    protected $PRODUCT_TYPE;

    public function __construct() {
        $this->HTTP_ERROR_MESSAGE           = config('apimessages.HTTP_SERVER_ERROR');
        $this->HTTP_SUCCESS_MESSAGE         = config('apimessages.HTTP_SUCCESS');
        $this->HTTP_NO_CONTENT_MESSAGE      = config('apimessages.HTTP_NO_CONTENT');
        $this->HTTP_BAD_REQUEST             = config('apimessages.HTTP_BAD_REQUEST');
        $this->PAYMENT_TERMS_STATUS         = config('sturdflex.PAYMENT_TERMS_STATUS');
        $this->SUPPLY_METHOD_STATUS         = config('sturdflex.SUPPLY_METHOD_STATUS');
        $this->COMPETITORS                  = config('sturdflex.COMPETITORS');
        $this->SF_PRICING_REQUEST_FILE_PATH = config('sturdflex.STURDFLEX_PRICING_REQUEST_FILE_PATH');
        $this->PRODUCT_TYPE                 = config('sturdflex.PRODUCT_TYPE');
    }

/**
     * Create new RFQ
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function createRequest(Request $request) {
        // dd($request->all());
        try {

            $transaction = DB::transaction(function () use ($request) {

                $projectId               = $request->project_id;
                $paymentTermId           = $request->payment_term_id;
                $supplyMethodId          = $request->supply_method_id;
                $remarks                 = $request->comments;
                $dealerData              = $this->getDealerData();
                $competitorsData         = collect(config('sturdflex.COMPETITORS'));
                $competitorImageSequence = $request->competitor_image_sequence;
                $competitors             = collect(json_decode($request->competitors))->map(function ($competitor) use ($competitorsData) {
                    $competitor->name = $competitorsData->where('id', $competitor->competitor_id)->pluck('name')[0] ?? '-';
                    return $competitor;
                });

                $products           = json_decode($request->products);
                $competitorImages   = $request->file('competitor_images');
                $userId             = Auth::user()->id;
                $projectModel       = SturdflexProjects::where('account_id', $projectId)->select('account_name', 'status')->first();
                $variantsCollection = collect(SturdflexProductVariants::select('id', 'variant_name')->get());
                $productCollection  = collect(SturdflexProductMasters::where('status', 1)->select('id', 'product_name')->get());

                $createdRequest = SturdflexPriceRequestMasters::create([
                    'request_code'          => $this->generateRequestCode(),
                    'product_id'            => $products[0]->product_id,
                    'project_id'            => $projectId,
                    'project_type'          => 1,
                    'project_name'          => $projectModel?->account_name,
                    'project_building_size' => NULL,
                    'asking_price'          => 0,
                    'payment_term_id'       => $paymentTermId,
                    'supply_method_id'      => $supplyMethodId,
                    'competitors'           => $competitors,
                    'ho_remarks'            => $remarks,
                    'status'                => 1
                ]);

                $variantArray = [];

                foreach ($products as $product) {

                    $variantName    = $variantsCollection->where('id', $product?->variant_id ?? 0)->pluck('variant_name')[0] ?? '-';
                    $productName    = $productCollection->where('id', $product?->product_id)->pluck('product_name')[0] ?? '-';
                    $variantArray[] = [
                        'request_id'               => $createdRequest?->id,
                        'product_id'               => $product?->product_id,
                        'request_type'             => isset($product->variant_id) ? 1 : 0,
                        'product_name'             => $productName,
                        'variant_id'               => isset($product->variant_id) ? $product->variant_id : NULL,
                        'variant_name'             => $variantName,
                        'quantity'                 => $product?->quantity,
                        'immediate_order_quantity' => $product?->immediate_order_quantity,
                        'mrp'                      => 0,
                        'selling_price'            => $product?->asking_price,
                        'tagged_project_id'        => $projectId,
                        'district_id'              => 0,
                        'base_price'               => $product?->asking_price,
                        'status'                   => 1,
                        'comment'                  => $product?->comment,
                        'created_by'               => $userId,
                        'created_at'               => date('Y-m-d H:i:s')
                    ];
                }

                SturdflexPriceRequestVariantMasters::insert($variantArray);

                if (!empty($competitorImages) && count($competitorImages) > 0) {
                    $folderPath = config('filepath.STURDFLEX_PRICING_REQUEST_FILE_PATH');
                    foreach ($competitorImages as $key => $image) {
                        $fileArray = [
                            'file'          => $image,
                            'has_file'      => false,
                            'existing_file' => '',
                            'folder'        => $folderPath
                        ];
                        $fileMeta = $this->saveFile($fileArray);

                        SturdflexPricingRequestImageMasters::create([
                            'request_id'            => $createdRequest->id,
                            'image_type'            => 1,
                            'request_image_type_id' => $competitorImageSequence[$key],
                            'model_id'              => $competitorImageSequence[$key],
                            'image_url'             => (string) $fileMeta['data'] ?? NULL
                        ]);

                    }
                }

                $data['data'] = (Object) [];

                return GlobalApiResponse::successResponseMobileApi($this->HTTP_SUCCESS_MESSAGE[0], $this->HTTP_SUCCESS_MESSAGE[1], $data, '');

            });
            return $transaction;

        } catch (Exception $error) {
            return GlobalApiResponse::errorResponse($this->HTTP_ERROR_MESSAGE[0], 500, $error->getMessage());
        }

    }

}
