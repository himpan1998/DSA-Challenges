<?php

namespace App\Models\Sturdflex;

use AccountAreaAccess;
use AccountKycMasters;
use Addresses;
use App\Traits\CreatedUpdatedBy;
use App\User;
use Distributors;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Database\Eloquent\SoftDeletes;
use SapMasters;
use StatusMaster;
use Staudenmeir\EloquentJsonRelations\HasJsonRelationships;
use SubDealers;
use Vinkla\Hashids\Facades\Hashids;

Relation::morphMap([
    18 => Distributors::class,
    39 => Dealers::class,
    40 => SubDealers::class
]);

class tbl_sturdflex_retailer_master extends Model {

    use CreatedUpdatedBy;
    use HasJsonRelationships;
    use SoftDeletes;

    protected $accountType       = 79;
    protected $accountModelAlias = 'SturdflexRetailers';
    protected $primaryKey        = 'account_id';
    protected $guarded           = ['account_id'];
    protected $hidden            = ['updated_by', 'updated_at', 'deleted_at'];
    protected $fillable          = [
        'account_id', 'account_code', 'account_type', 'parent_account_id', 'parent_account_type',
        'lead_id', 'status', 'name', 'owner_name', 'mobile_no', 'whatsapp_no', 'alternate_no', 'landline_no', 'date_of_birth',
        'date_of_anniversary', 'store_image', 'latitude', 'longitude', 'geo_location', 'products'
    ];

    protected $casts = [
        'products' => 'json'
    ];

    protected $attributes = [
        'products'   => '[]',
        'product_id' => '[]'
    ];

    protected $appends = [];

    /** Get encoded primary key value by interacting with account_id column */
    public function encryptedId(): Attribute {
        return Attribute::make(
            get: fn() => Hashids::encode($this->account_id)
        );
    }

    /**
     * get parent account attribute object
     * with morph relation for this row
     * @return mixed
     */
    public function taggedAccount(): Attribute {
        return Attribute::make(
            get: fn() => [
                'account_id'   => $this->parent_account_id,
                'account_type' => $this->parent_account_type,
                'account_name' => $this->parent_account?->name
            ]
        );
    }

    /** Get store image with full path by interacting with store_image column */
    public function storeImage(): Attribute {
        return Attribute::make(
            get: fn($value) => $value ? asset('storage/' . config('filepath.STORE_IMAGE_FILE_PATH')) . '/' . $value : asset(config('constants.NO_IMAGE'))
        );
    }

    /** Get operational area information with this account */
    public function operational_area(): HasOne {
        $row = $this->hasOne(AccountAreaAccess::class, 'account_id')->where('account_type', $this->accountType);
        $row = $row->select(['account_id', 'account_type', 'state_array', 'district_array', 'block_array', 'area_type', 'area_array']);
        //$row = $row->with('state_data', 'district_data');
        return $row;
    }

    /** Get address associated with this account */
    public function account_address(): HasOne {
        return $this->hasOne(Addresses::class, 'account_id')->where('account_type', $this->accountType);
    }

    /** get all stored addressres associated with this account */
    public function addresses(): HasMany {
        return $this->hasMany(Addresses::class, 'account_id')->where('account_type', $this->accountType)->with('state', 'district', 'block', 'area');
    }

    /* get parent account data */
    public function parent_account(): MorphTo {
        return $this->morphTo();
    }

    /**
     * Get status row associated with this account
     */
    public function account_status(): HasOne {
        return $this->hasOne(StatusMaster::class, 'lead_type', 'status')->select('lead_type', 'type_name', 'style');
    }

    /** Get kyc information associated with this retialer account */
    public function account_kyc(): HasOne {
        return $this->hasOne(AccountKycMasters::class, 'account_id')->where('account_type', $this->accountModelAlias);
    }

    /** Get sap codes associated with this retialer account */
    public function account_sap(): HasMany {
        return $this->hasMany(SapMasters::class, 'account_id')->where('account_type', $this->accountType)->with('product');
    }

    /** Get user details associated with created_by column */
    public function created_by_user(): BelongsTo {
        return $this->belongsTo(User::class, 'created_by', 'id')->select('id', 'name', 'profile_id');
    }

}
